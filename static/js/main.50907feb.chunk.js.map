{"version":3,"sources":["Components/SelectAndOptionsDishType.js","App.js","reportWebVitals.js","index.js"],"names":["SelectAndOptionsDishType","useState","showPizzaInput","setShowPizzaInput","showSoupInput","setShowSoupInput","showSandwishInput","setShowSandwishInput","nameDish","setNameDish","timePreparation","setTimePreparation","choosenDish","setChoosenDish","choosenSlices","setChoosenSlices","choosenDiameter","setChoosenDiameter","choosenSpiciness","setChoosenSpiciness","choosenSlicesOfBread","setChoosenSlicesOfBread","onSubmit","e","preventDefault","fetch","method","body","JSON","stringify","name","preparation_time","type","no_of_slices","Number","diameter","spiciness_scale","slices_of_bread","headers","then","data","json","console","log","catch","error","className","onInput","target","value","placeholder","step","required","pattern","onChange","style","display","min","max","htmlFor","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.50907feb.chunk.js","sourcesContent":["import './SelectAndOptionsDishType.css';\r\nimport React, { useState } from 'react';\r\n\r\nfunction SelectAndOptionsDishType() {\r\n\r\n  const [showPizzaInput, setShowPizzaInput] = useState(false);\r\n  const [showSoupInput, setShowSoupInput] = useState(false);\r\n  const [showSandwishInput, setShowSandwishInput] = useState(false);\r\n  const [nameDish, setNameDish] = useState(\"\");\r\n  const [timePreparation, setTimePreparation] = useState('00:00:00');\r\n  const [choosenDish, setChoosenDish] = useState(\"\");\r\n  const [choosenSlices, setChoosenSlices] = useState(\"\");\r\n  const [choosenDiameter, setChoosenDiameter] = useState(\"\");\r\n  const [choosenSpiciness, setChoosenSpiciness] = useState(\"\");\r\n  const [choosenSlicesOfBread, setChoosenSlicesOfBread] = useState(\"\");\r\n  \r\n\r\n  const resetData = () => {\r\n    setChoosenSlices(null)\r\n    setChoosenDiameter(null)\r\n    setChoosenSpiciness(null)\r\n    setChoosenSlicesOfBread(null)\r\n  }\r\n\r\n  const submitData = (e) => {\r\n    e.preventDefault();\r\n    resetData();\r\n    fetch(\"https://frosty-wood-6558.getsandbox.com:443/dishes\", {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n      name: nameDish,\r\n      preparation_time: timePreparation,\r\n      type: choosenDish,\r\n      no_of_slices: Number(choosenSlices),\r\n      diameter: Number(choosenDiameter),\r\n      spiciness_scale: Number(choosenSpiciness),\r\n      slices_of_bread: Number(choosenSlicesOfBread),\r\n    }),\r\n      headers: {\"Content-type\": \"application/json; charset=UTF-8\"}\r\n    })\r\n    .then(data => data.json())\r\n    .then(data => console.log(data))\r\n    .catch(error => console.error(error))\r\n\r\n  }\r\n\r\n  const chooseDish = (e) => {\r\n    setShowPizzaInput(e.target.value === \"pizza\");\r\n    setShowSoupInput(e.target.value === \"soup\");\r\n    setShowSandwishInput(e.target.value === \"sandwich\")\r\n    setChoosenDish(e.target.value)\r\n  }\r\n\r\n  return(\r\n    <form onSubmit={submitData}>\r\n      <input className=\"input-name\" onInput={e => setNameDish(e.target.value)} type='text' placeholder={\"name\"}></input>\r\n      <p>Time preparation</p>\r\n      <input className=\"input-time\" onInput={e => setTimePreparation(e.target.value)} type='text' step=\"1\" required pattern=\"\\d\\d:\\d\\d:\\d\\d\" placeholder=\"00:00:00\"></input>\r\n      <select onChange={chooseDish} placeholder={\"select dish type\"} value={choosenDish}>\r\n          <option style={{display: 'none'}} value=\"\">Please Choose Dish Type</option>\r\n          <option value=\"pizza\">Pizza</option>\r\n          <option value=\"soup\">Soup</option>\r\n          <option value=\"sandwich\">Sandwich</option>\r\n      </select>\r\n      {showPizzaInput && <input onInput={e => setChoosenSlices(e.target.value)} type=\"number\" placeholder=\"Numbers of slices\" />}\r\n      {showPizzaInput && <input onInput={e => setChoosenDiameter(e.target.value)}type=\"number\" step=\"0.01\" placeholder=\"diameter\" />}\r\n      {showSoupInput && \r\n        <div className=\"spiciness-scale\">\r\n          <input className=\"inputSpiciness\" onChange={e => setChoosenSpiciness(e.target.value)}type=\"range\" min=\"0\" max=\"9\" name=\"spiciness\" />\r\n          <label htmlFor=\"spiciness\">spiciness scale</label>\r\n        </div> \r\n      }\r\n      {showSandwishInput && <input onInput={e => setChoosenSlicesOfBread(e.target.value)} type=\"number\" placeholder=\"slices of bread\" />}\r\n      <button className=\"btnSubmitData\" type=\"submit\">submit</button>\r\n    </form>\r\n  )\r\n  } \r\n  \r\n  export default SelectAndOptionsDishType;","import './App.css'; \nimport SelectAndOptionsDishType from './Components/SelectAndOptionsDishType';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <SelectAndOptionsDishType />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}